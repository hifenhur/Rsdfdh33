package printer.entity;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

import com.datecs.api.printer.Printer;


import java.io.IOException;
import java.io.Serializable;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import br.com.expark.pdvdesk.R;


public class Base implements Serializable {

	/**
	 * Protected Serial, Generated by Eclipse
	 */
	private static final long serialVersionUID = 6050117813518361668L;

	protected int id;
	/***
	 * Numero da notifica��o [99999/9999]
	 */
	//protected String notificacao = "56193/2013";
	/***
	 * Data do vencimento do documento [99/99/9999]
	 */
	protected String dataVencimento;
	/***
	 * Data da autua��o [99/99/9999]
	 */
	protected String dataAutuacao;
	/***
	 * Hora da autua��o [99:99 horas]
	 */
	protected String hora;
	/***
	 * Placa do ve�culo [XXX-9999]
	 */
	protected String placa;
	/***
	 * Estado da placa, [XX] ( coloquei regi�o, devido estado significar condi��o )
	 */
	protected String regiaoPlaca = "DF";
	/***
	 * Rua em que a notifica��o/multa foi gerada [xxxx xxxxx xxxxxxxxx]
	 */
	protected String rua;
	/***
	 * Marca e modelo do ve�culo [xxx/xxxxx]
	 */
	protected String marcaModelo = "MMC/ASX";
	/***
	 * Mun�cipio do ve�culo [xxxxxxx]
	 */
	protected String municipio = "Brasilia";

	protected String numeroAgente;
	/**
	 * Valor da multa [99.99]
	 */

	protected String valor;
	/**
	 * Tipo de irregularidade [9]
	 */
	protected int irregularidade;
	/**
	 * Voc� ver� esta propriedade como 'Agencia/C�d. Cedente' no boleto
	 * Agencia/C�d. Cedente [999-9/999999-9]
	 */

	protected String agenciaCod;
	/**
	 * Voc� ver� esta propriedade como 'Nosso N�mero' no boleto
	 * Nosso N�mero [99/99999999999999-9]
	 */

	protected String nossoNumero;
	/**
	 * Voc� ver� esta propriedade como 'N�mero Documento' no boleto
	 * N�mero Documento [9999999]
	 */

	protected String numeroDoc;
	/**
	 * Voc� ver� esta propriedade como 'Nro.(N�mero) Lan�amento' no boleto
	 * Nro. Lan�amento [9999999]
	 */

	protected String numeroLanc;

	private String numeroGeral;

	private String numeroGeralPrint;

	
	//Construtor
	public Base(){

	}

	//public String getNotificacao() {
		//return notificacao;
	//}

	//public void setNotificacao(String notificacao) {
	//	this.notificacao = notificacao;
	//}

	public String getDataVencimento() {
		return dataVencimento;
	}

	public void setDataVencimento(String dataVencimento) {
		this.dataVencimento = dataVencimento;
	}

	public String getDataAutuacao() {
		return dataAutuacao;
	}

	public void setDataAutuacao(String dataAutuacao) {
		this.dataAutuacao = dataAutuacao;
	}

	public String getHora() {
		return hora;
	}

	public void setHora(String hora) {
		this.hora = hora;
	}

	public String getPlaca() {
		return placa;
	}

	public void setPlaca(String placa) {
		this.placa = placa;
	}

	public String getRegiaoPlaca() {
		return regiaoPlaca;
	}

	public void setRegiaoPlaca(String regiaoPlaca) {
		this.regiaoPlaca = regiaoPlaca;
	}

	public String getRua() {
		return rua;
	}

	public void setRua(String rua) {
		this.rua = rua;
	}

	public String getMarcaModelo() {
		return marcaModelo;
	}

	public void setMarcaModelo(String marcaModelo) {
		this.marcaModelo = marcaModelo;
	}

	public String getMunicipio() {
		return municipio;
	}

	public void setMunicipio(String municipio) {
		this.municipio = municipio;
	}

	public String getNumeroAgente() {
		return numeroAgente;
	}



	public void setNumeroAgente(String numeroAgente) {
		this.numeroAgente = numeroAgente;
	}

	public String getValor() {
		return retornaValor();
		
	}

	//public void setValor(String valor) {
	//	this.valor = valor;
	//}
	
	public int getIrregularidade() {
		return irregularidade;
	}

	public void setIrregularidade(int irregularidade) {
		this.irregularidade = irregularidade;
	}

	public String getAgenciaCod() {
		return agenciaCod;
	}
	
	public void setAgenciaCod(String agenciaCod) {
		this.agenciaCod = agenciaCod;
	}
	
	public String getNossoNumero() {
		return nossoNumero;
	}
	
	public void setNossoNumero(String nossoNumero) {
		this.nossoNumero = nossoNumero;
	}
	
	public String getNumeroDoc() {
		return numeroDoc;
	}
	
	public void setNumeroDoc(String numeroDoc) {
		this.numeroDoc = numeroDoc;
	}
	
	public String getNumeroLanc() {
		return numeroLanc;
	}
	
	public void setNumeroLanc(String numeroLanc) {
		this.numeroLanc = numeroLanc;
	}
	
	public String getNumeroGeral() {
		return numeroGeral;
	}

	public void setNumeroGeral(String numeroGeral) {
		this.numeroGeral = numeroGeral;
	}
	
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}
	
	public String getNumeroGeralPrint() {
		//return numeroGeralPrint;
		return numeroGeral.replace(".", "").replace(" ", "");
	}
	
	//public void setNumeroGeralPrint(String numeroGeralPrint) {
	//	this.numeroGeralPrint = numeroGeralPrint;
	//}
	/**
	 * Retorna o numero codigo de barras gerado a 
	 * partir do numero geral ou ipte ou tamb�m chamado
	 * linha digitavel 
	 */
	public String getNumberBarcode()
	{
		return getBank()+getCurrency()+getCheckerDigit()+getMaturityDate()+getValue()
				+getTransferor()+ourNumber1()+getConst1()+ourNumber2()
				+getConst2()+ourNumber3();
	}
	
	/**
	 * Calcula o numero do codigo de barras a partir da linha digitavel
	 */
	
	/**
	 * Codigo do Cedente
	 */
	private String getTransferor()
	{
		return getNumeroGeralPrint().substring(4,9)+getNumeroGeralPrint().substring(10,12);
	}
	/**
	 * Codigo do banco digitos 1-3
	 */
	private String getBank()
	{
		return getNumeroGeralPrint().substring(0, 3);
	}
	/**
	 * Moeda 4
	 */
	private String getCurrency()
	{
		return ""+getNumeroGeralPrint().charAt(3);
	}
	/**
	 * Data de vencimento
	 */
	private String getMaturityDate()
	{
		return getNumeroGeralPrint().substring(33,37);
	}
	/**
	 * Digito verificador geral
	 */
	private String getCheckerDigit()
	{
		return ""+getNumeroGeralPrint().charAt(32);
	}
	/**
	 * Valor
	 */
	private String getValue()
	{
		return getNumeroGeralPrint().substring(37, 47);
	}
	/**
	 * Nosso numero parte 1
	 */
	private String ourNumber1()
	{
		return getNumeroGeralPrint().substring(12, 15);
	}
	/**
	 * Nosso numero parte 2
	 */
	private String ourNumber2()
	{
		return getNumeroGeralPrint().substring(16, 19);
	}
	/**
	 * Nosso numero parte 3
	 */
	private String ourNumber3()
	{
		return getNumeroGeralPrint().substring(21,31);
	}
	/**
	 * Constante 1 
	 * 1� posi��o do nosso numero
	 */
	private String getConst1()
	{
		return ""+getNumeroGeralPrint().charAt(15);
	}
	/**
	 * Constante 2
	 * 2� posi��o do nosso numero
	 */
		private String getConst2()
		{
			return ""+getNumeroGeralPrint().charAt(19);
		}
	/***
	 * Define uma barra vertical <b>(PARTINDO DO PONTO QUE O DOCUMENTO EST� SETADO COMO PAGE_TOP)</b>
	 * para impress�o de divis�es.
	 * @param resource - String tipo que ir� definir a borda, Ex: [ barras (|) pontos (.) ] qualquer caractere suportado pela impressora
	 * @param quantidade - int quantidade de itens que ter� na borda.
	 * @param x - Posi��o no eixo x (PAGE_TOP) horizontal.
	 * @param distanciaInicial - int eixo y vertical faz com que os itens se distanciem do topo aproximando-se do fim da p�gina.
	 * @param mPrinter - Objeto para comunica��o com a impressora

	 * @see {@code setPageXY} - com.datecs.api.printer.Printer
	 */
	public static  void setBordaVertical(String resource,int quantidade,int x,int distanciaInicial, Printer mPrinter){
        /* Distancia de um para o outro: 20*/
		for (int i = 0; i <= quantidade; i++) {
			try {
				mPrinter.setPageXY(x, distanciaInicial);
				mPrinter.printTaggedText(""+resource+"{br}");
			} catch (IOException e) {
				e.printStackTrace();
			}
			distanciaInicial += 20;
		}
	}
	
	/***
	 * Define uma barra horizontal <b>(PARTINDO DO PONTO QUE O DOCUMENTO EST� SETADO COMO PAGE_TOP)</b>
	 * @param resource - String tipo que ir� definir a borda, Ex: [ barras (|) pontos (.) ] qualquer caractere suportado pela impressora
	 * @param quantidade - Int quantidade de itens que ter� na borda.
	 * @param distanciaInicial - Posi��o no eixo x (PAGE_TOP) horizontal.
	 * @param y - Posi��o no eixo y (PAGE_TOP) vertical.
	 * @param mPrinter - Objeto para comunica��o com a impressora.

	 * @see {@code setPageXY} - com.datecs.api.printer.Printer
	 */
	public static void setBordaHorizontal(String resource,int quantidade,int distanciaInicial,int y, Printer mPrinter){
        /* Distancia de um para o outro: 15*/
		for (int i = 0; i <= quantidade; i++) {
			try {
				mPrinter.setPageXY(distanciaInicial, y);
				mPrinter.printTaggedText(""+resource+"{br}");
			} catch (IOException e) {
				e.printStackTrace();
			}
			distanciaInicial += 15;
		}
	}
	
	/***
	 * Utiliza dos recursos dispon�veis da API datecs, para realizar a impress�o dentro do documento, do logo de Concordia.
	 * @param context - Contexto de aplica��o para obter o recurso associado ao logo.
	 * @param mPrinter - Objeto printer, para poder utilizar da API datecs
	 */
	public static void PrintLogo(Context context,Printer mPrinter){
		BitmapFactory.Options options = new BitmapFactory.Options();
        options.inScaled = false;
       
		Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.concordia_logo);
		
		bitmap= Bitmap.createScaledBitmap(bitmap, 75, 95, true);
		final int width = bitmap.getWidth();
		final int height = bitmap.getHeight();
		final int[] argb = new int[width * height];		
		bitmap.getPixels(argb, 0, width, 0, 0, width, height);	
		bitmap.recycle();
		
		try {
			mPrinter.printImage(argb, width, height, Printer.PAGE_LEFT, true);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	public static void printLogoPatrocinio(Context context,Printer mPrinter)
	{
		BitmapFactory.Options options = new BitmapFactory.Options();
        options.inScaled = true;
       
		Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.logo2);
		
		bitmap= Bitmap.createScaledBitmap(bitmap, 400, 128, true);
		final int width = bitmap.getWidth();
		final int height = bitmap.getHeight();
		final int[] argb = new int[width * height];		
		bitmap.getPixels(argb, 0, width, 0, 0, width, height);	

		
		try {

			mPrinter.printImage(argb, width, height, Printer.PAGE_LEFT, true);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	/***
	 * Dado o tipo de irregularidade que ser� setada na vari�vel, ele ir� gerar o texto, que ser� mostrado no boleto.
	 * @param Outros - No caso da irregularidade 5, DEVER� ser enviado um texto, para mostrar junto ao checkbox.
	 * @return Retorna uma infra��o de acordo com o tipo da infra��o setada.
	 */
	//public String retorneTipoInfracao(){
		//String temp;
		//switch(irregularidade){
		//case 0:
		//	temp = "Cart�o Inv�lido";
		//	break;
		//case 1:
		//	temp = "Cart�o Expirado";
		//	break;
		///case 2:
		//	temp = "Sem Cart�o";
		//	break;
		//case 3:
		////	temp = "Estacionado Incorretamente";
		//	break;
		//case 4:
		//	temp = "Cart�o Ileg�vel";
		//	break;
		//default:
		//case 5:
		//	temp = "Fim de Rotatividade";
		//break;
	//	case 6:
		//	temp = "Fim Cr�dito";
		//break;
	//	case 7:
	//		temp = "Fim Toler�ncia";
	//	break;
	//	}
	//	return temp;
//	}
	
	/***
	 * Realiza a opera��o de obter a data atual e adicionar +2 dias para o vencimento do boleto.
	 * @return Retorna a data atual adicionada de +2.
	 * @author Ronniery Borges Correa.
	 * @see {@link java.util.Calendar} {@code SimpleDateFormat}
	 */
	//public String retorneDataVencimento(){
		//Dentro do oncreate
       // SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
      //  Calendar c = Calendar.getInstance();
        //Adiciona dois dias, a partir do dia em que foi gerado a multa
      //  c.add(Calendar.DATE, 2);
      //  return sdf.format(c.getTime()).toString();
	//}
	/**
	 * Metodo que retorna o valor da data de vencimento
	 * pegando o numero do codigo de barras
	 */
	public String retorneDataVencimento(){
		return calculoDataVencimento(getMaturityDate());
		
	}
	
	/**
	 * Metodo que retorna o valor nominal 
	 * pegando o numero do codigo de barras
	 */
	public String retornaValor()
	{
		return calculoValorNominal(getValue());

	}
	/**
	 * Pega a data atual
	 */
	public static String retorneDataAtual(){
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Calendar c = Calendar.getInstance();
       
        return sdf.format(c.getTime()).toString();
	}
	
	/**
	 * Pega da hora atual
	 */
	public static String retorneHoraAtual(){
		
		Calendar c = Calendar.getInstance();
		return timeFormat(c.get(Calendar.HOUR_OF_DAY))+"h "+timeFormat(c.get(Calendar.MINUTE))+"min";
	}
	
	
	/**
	 * Calcula o valor nominal do boleto
	 */
	static String calculoValorNominal(String data)
	{
		double valor=(double) Long.parseLong(data)/100;
		return valor+"";
	}
	/**
	 * Calcula a data de vencimento do boleto
	 * acrescendo dias a data base
	 */
	public static String calculoDataVencimento(String data)
	{
		//Data base para o calculo do vencimento 07/10/1997
		int dias= Integer.parseInt(data);
		 Calendar c=new GregorianCalendar(1997, Calendar.OCTOBER,7);
		c.add(Calendar.DATE, dias);
		int mes=c.get(Calendar.MONTH)+1;//M�s varia de 0 a 11, 0=Janeiro, 11=Dezembro
		return timeFormat(c.get(Calendar.DAY_OF_MONTH))+"/"+timeFormat(mes)+"/"+c.get(Calendar.YEAR);
	}
	
	public static String obterDataVencimentoBoletoFenabran(String data){
		String dataNova ="";
	      if(data != null){
	          try{
	              DateFormat df1 = new SimpleDateFormat("yyyyMMdd");
	              DateFormat df2 = new SimpleDateFormat("dd/MM/yyyy");
	              Date dataFormatada = df1.parse(data);
	              dataNova = df2.format(dataFormatada);
	          }catch(ParseException ex){
	              System.out.println(ex.getMessage());
	          }          
	      }
	      return dataNova;
	}
	public static String timeFormat(int i)
	{
		if(i<10)
		{
			return "0"+i;
		}
		else
		{
			return ""+i;
		}
	}
	
}
